{
	"id": "9d2d95a0c335fb8b4ce3d3bdff234701",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"evmVersion": "byzantium"
		},
		"sources": {
			"contracts/Whale.sol": {
				"content": " // SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract Whale {\n    function toShortString(bytes32 _data)\n    pure\n    public\n    returns (string memory )\n    {\n    // needs to be bytes type rather than bytes32 in order to be writeable\n    bytes memory _bytesContainer = new bytes(32);\n    // uint to keep track of actual character length of string\n    // bytes32 is always 32 characters long the string may be shorter\n    uint256 _charCount = 0;\n    // loop through every element in bytes32\n    for (uint256 _bytesCounter = 0; _bytesCounter < 32; _bytesCounter++) {\n        /*\n        TLDR: takes a single character from bytes based on counter\n        convert bytes32 data to uint in order to increase the number enough to\n        shift bytes further left while pushing out leftmost bytes\n        then convert uint256 data back to bytes32\n        then convert to bytes1 where everything but the leftmost hex value (byte)\n        is cutoff leaving only the leftmost byte\n        */\n        bytes1 _char = bytes1(bytes32(uint256(_data) * 2 ** (8 * _bytesCounter)));\n        // if the character is not empty\n        if (_char != 0) {\n        // add to bytes representing string\n        _bytesContainer[_charCount] = _char;\n        // increment count so we know length later\n        _charCount++;\n        }\n    }\n\n    // create dynamically sized bytes array to use for trimming\n    bytes memory _bytesContainerTrimmed = new bytes(_charCount);\n\n    // loop through for character length of string\n    for (uint256 _charCounter = 0; _charCounter < _charCount; _charCounter++) {\n        // add each character to trimmed bytes container, leaving out extra\n        _bytesContainerTrimmed[_charCounter] = _bytesContainer[_charCounter];\n    }\n\n    // return correct length string with no padding\n    return string(_bytesContainerTrimmed);\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Whale.sol": {
				"Whale": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_data",
									"type": "bytes32"
								}
							],
							"name": "toShortString",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Whale.sol\":122:1910  contract Whale {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Whale.sol\":122:1910  contract Whale {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      div(calldataload(0x00), 0x0100000000000000000000000000000000000000000000000000000000)\n      0xdb91bb50\n      dup2\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Whale.sol\":143:1908  function toShortString(bytes32 _data)... */\n    tag_3:\n      tag_4\n      tag_5\n      calldatasize\n      0x04\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"contracts/Whale.sol\":346:359  new bytes(32) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/Whale.sol\":356:358  32 */\n      0x20\n        /* \"contracts/Whale.sol\":346:359  new bytes(32) */\n      dup1\n      dup3\n      mstore\n      dup2\n      dup4\n      add\n      swap1\n      swap3\n      mstore\n        /* \"contracts/Whale.sol\":214:227  string memory */\n      0x60\n      swap2\n        /* \"contracts/Whale.sol\":315:343  bytes memory _bytesContainer */\n      0x00\n      swap2\n        /* \"contracts/Whale.sol\":346:359  new bytes(32) */\n      swap1\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n      pop\n        /* \"contracts/Whale.sol\":315:359  bytes memory _bytesContainer = new bytes(32) */\n      swap1\n      pop\n        /* \"contracts/Whale.sol\":498:516  uint256 _charCount */\n      0x00\n        /* \"contracts/Whale.sol\":576:597  uint256 _bytesCounter */\n      dup1\n        /* \"contracts/Whale.sol\":571:1384  for (uint256 _bytesCounter = 0; _bytesCounter < 32; _bytesCounter++) {... */\n    tag_13:\n        /* \"contracts/Whale.sol\":619:621  32 */\n      0x20\n        /* \"contracts/Whale.sol\":603:616  _bytesCounter */\n      dup2\n        /* \"contracts/Whale.sol\":603:621  _bytesCounter < 32 */\n      lt\n        /* \"contracts/Whale.sol\":571:1384  for (uint256 _bytesCounter = 0; _bytesCounter < 32; _bytesCounter++) {... */\n      iszero\n      tag_14\n      jumpi\n        /* \"contracts/Whale.sol\":1065:1077  bytes1 _char */\n      0x00\n        /* \"contracts/Whale.sol\":1118:1135  8 * _bytesCounter */\n      tag_16\n        /* \"contracts/Whale.sol\":1122:1135  _bytesCounter */\n      dup3\n        /* \"contracts/Whale.sol\":1118:1119  8 */\n      0x08\n        /* \"contracts/Whale.sol\":1118:1135  8 * _bytesCounter */\n      tag_17\n      jump\t// in\n    tag_16:\n        /* \"contracts/Whale.sol\":1112:1136  2 ** (8 * _bytesCounter) */\n      tag_18\n      swap1\n        /* \"contracts/Whale.sol\":1112:1113  2 */\n      0x02\n        /* \"contracts/Whale.sol\":1112:1136  2 ** (8 * _bytesCounter) */\n      tag_19\n      jump\t// in\n    tag_18:\n        /* \"contracts/Whale.sol\":1095:1136  uint256(_data) * 2 ** (8 * _bytesCounter) */\n      tag_20\n      swap1\n        /* \"contracts/Whale.sol\":1103:1108  _data */\n      dup8\n        /* \"contracts/Whale.sol\":1095:1136  uint256(_data) * 2 ** (8 * _bytesCounter) */\n      tag_17\n      jump\t// in\n    tag_20:\n        /* \"contracts/Whale.sol\":1087:1137  bytes32(uint256(_data) * 2 ** (8 * _bytesCounter)) */\n      swap1\n      pop\n        /* \"contracts/Whale.sol\":1193:1203  _char != 0 */\n      0xff00000000000000000000000000000000000000000000000000000000000000\n      dup2\n      and\n      iszero\n        /* \"contracts/Whale.sol\":1189:1378  if (_char != 0) {... */\n      tag_21\n      jumpi\n        /* \"contracts/Whale.sol\":1289:1294  _char */\n      dup1\n        /* \"contracts/Whale.sol\":1259:1274  _bytesContainer */\n      dup5\n        /* \"contracts/Whale.sol\":1275:1285  _charCount */\n      dup5\n        /* \"contracts/Whale.sol\":1259:1286  _bytesContainer[_charCount] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_22\n      jumpi\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_22:\n      0x20\n      add\n      add\n        /* \"contracts/Whale.sol\":1259:1294  _bytesContainer[_charCount] = _char */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"contracts/Whale.sol\":1355:1367  _charCount++ */\n      dup3\n      tag_23\n      dup2\n      tag_24\n      jump\t// in\n    tag_23:\n      swap4\n      pop\n      pop\n        /* \"contracts/Whale.sol\":1189:1378  if (_char != 0) {... */\n    tag_21:\n      pop\n        /* \"contracts/Whale.sol\":623:638  _bytesCounter++ */\n      dup1\n      tag_25\n      dup2\n      tag_24\n      jump\t// in\n    tag_25:\n      swap2\n      pop\n      pop\n        /* \"contracts/Whale.sol\":571:1384  for (uint256 _bytesCounter = 0; _bytesCounter < 32; _bytesCounter++) {... */\n      jump(tag_13)\n    tag_14:\n      pop\n        /* \"contracts/Whale.sol\":1454:1489  bytes memory _bytesContainerTrimmed */\n      0x00\n        /* \"contracts/Whale.sol\":1502:1512  _charCount */\n      dup2\n        /* \"contracts/Whale.sol\":1492:1513  new bytes(_charCount) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_26\n      jumpi\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_26:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_27\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_27:\n      pop\n        /* \"contracts/Whale.sol\":1454:1513  bytes memory _bytesContainerTrimmed = new bytes(_charCount) */\n      swap1\n      pop\n        /* \"contracts/Whale.sol\":1576:1596  uint256 _charCounter */\n      0x00\n        /* \"contracts/Whale.sol\":1571:1806  for (uint256 _charCounter = 0; _charCounter < _charCount; _charCounter++) {... */\n    tag_28:\n        /* \"contracts/Whale.sol\":1617:1627  _charCount */\n      dup3\n        /* \"contracts/Whale.sol\":1602:1614  _charCounter */\n      dup2\n        /* \"contracts/Whale.sol\":1602:1627  _charCounter < _charCount */\n      lt\n        /* \"contracts/Whale.sol\":1571:1806  for (uint256 _charCounter = 0; _charCounter < _charCount; _charCounter++) {... */\n      iszero\n      tag_29\n      jumpi\n        /* \"contracts/Whale.sol\":1770:1785  _bytesContainer */\n      dup4\n        /* \"contracts/Whale.sol\":1786:1798  _charCounter */\n      dup2\n        /* \"contracts/Whale.sol\":1770:1799  _bytesContainer[_charCounter] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_31\n      jumpi\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_31:\n      0x20\n      add\n      add\n      mload\n      0x0100000000000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0x0100000000000000000000000000000000000000000000000000000000000000\n      mul\n        /* \"contracts/Whale.sol\":1731:1753  _bytesContainerTrimmed */\n      dup3\n        /* \"contracts/Whale.sol\":1754:1766  _charCounter */\n      dup3\n        /* \"contracts/Whale.sol\":1731:1767  _bytesContainerTrimmed[_charCounter] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_32\n      jumpi\n      mstore(0x00, mul(0x4e487b71, exp(0x02, 0xe0)))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_32:\n      0x20\n      add\n      add\n        /* \"contracts/Whale.sol\":1731:1799  _bytesContainerTrimmed[_charCounter] = _bytesContainer[_charCounter] */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"contracts/Whale.sol\":1629:1643  _charCounter++ */\n      dup1\n      tag_33\n      dup2\n      tag_24\n      jump\t// in\n    tag_33:\n      swap2\n      pop\n      pop\n        /* \"contracts/Whale.sol\":1571:1806  for (uint256 _charCounter = 0; _charCounter < _charCount; _charCounter++) {... */\n      jump(tag_28)\n    tag_29:\n      pop\n        /* \"contracts/Whale.sol\":1878:1900  _bytesContainerTrimmed */\n      swap5\n        /* \"contracts/Whale.sol\":143:1908  function toShortString(bytes32 _data)... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:204   */\n    tag_6:\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:96   */\n      iszero\n      tag_36\n      jumpi\n        /* \"#utility.yul\":147:153   */\n      dup1\n        /* \"#utility.yul\":139:145   */\n      dup2\n        /* \"#utility.yul\":132:154   */\n      revert\n        /* \"#utility.yul\":94:96   */\n    tag_36:\n      pop\n        /* \"#utility.yul\":175:198   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":84:204   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":209:812   */\n    tag_9:\n      0x00\n        /* \"#utility.yul\":350:352   */\n      0x20\n        /* \"#utility.yul\":379:381   */\n      dup1\n        /* \"#utility.yul\":368:377   */\n      dup4\n        /* \"#utility.yul\":361:382   */\n      mstore\n        /* \"#utility.yul\":411:417   */\n      dup4\n        /* \"#utility.yul\":405:418   */\n      mload\n        /* \"#utility.yul\":454:460   */\n      dup1\n        /* \"#utility.yul\":449:451   */\n      dup3\n        /* \"#utility.yul\":438:447   */\n      dup6\n        /* \"#utility.yul\":434:452   */\n      add\n        /* \"#utility.yul\":427:461   */\n      mstore\n        /* \"#utility.yul\":479:483   */\n      dup3\n        /* \"#utility.yul\":492:632   */\n    tag_38:\n        /* \"#utility.yul\":506:512   */\n      dup2\n        /* \"#utility.yul\":503:504   */\n      dup2\n        /* \"#utility.yul\":500:513   */\n      lt\n        /* \"#utility.yul\":492:632   */\n      iszero\n      tag_40\n      jumpi\n        /* \"#utility.yul\":601:615   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":597:620   */\n      dup4\n      add\n        /* \"#utility.yul\":591:621   */\n      mload\n        /* \"#utility.yul\":567:584   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":586:588   */\n      0x40\n        /* \"#utility.yul\":563:589   */\n      add\n        /* \"#utility.yul\":556:622   */\n      mstore\n        /* \"#utility.yul\":521:531   */\n      dup3\n      add\n        /* \"#utility.yul\":492:632   */\n      jump(tag_38)\n    tag_40:\n        /* \"#utility.yul\":650:656   */\n      dup2\n        /* \"#utility.yul\":647:648   */\n      dup2\n        /* \"#utility.yul\":644:657   */\n      gt\n        /* \"#utility.yul\":641:643   */\n      iszero\n      tag_41\n      jumpi\n        /* \"#utility.yul\":720:724   */\n      dup4\n        /* \"#utility.yul\":715:717   */\n      0x40\n        /* \"#utility.yul\":706:712   */\n      dup4\n        /* \"#utility.yul\":695:704   */\n      dup8\n        /* \"#utility.yul\":691:713   */\n      add\n        /* \"#utility.yul\":687:718   */\n      add\n        /* \"#utility.yul\":680:725   */\n      mstore\n        /* \"#utility.yul\":641:643   */\n    tag_41:\n      pop\n        /* \"#utility.yul\":796:798   */\n      0x1f\n        /* \"#utility.yul\":775:790   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":771:800   */\n      and\n        /* \"#utility.yul\":756:801   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":803:805   */\n      0x40\n        /* \"#utility.yul\":752:806   */\n      add\n      swap4\n        /* \"#utility.yul\":330:812   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":817:1272   */\n    tag_42:\n        /* \"#utility.yul\":913:919   */\n      dup1\n        /* \"#utility.yul\":936:941   */\n      dup3\n        /* \"#utility.yul\":950:1266   */\n    tag_44:\n        /* \"#utility.yul\":999:1000   */\n      0x01\n        /* \"#utility.yul\":1036:1038   */\n      dup1\n        /* \"#utility.yul\":1026:1034   */\n      dup7\n        /* \"#utility.yul\":1023:1039   */\n      gt\n        /* \"#utility.yul\":1013:1015   */\n      tag_47\n      jumpi\n        /* \"#utility.yul\":1043:1048   */\n      pop\n      jump(tag_46)\n        /* \"#utility.yul\":1013:1015   */\n    tag_47:\n        /* \"#utility.yul\":1084:1088   */\n      dup2\n        /* \"#utility.yul\":1079:1082   */\n      dup8\n        /* \"#utility.yul\":1075:1089   */\n      div\n        /* \"#utility.yul\":1069:1073   */\n      dup3\n        /* \"#utility.yul\":1066:1090   */\n      gt\n        /* \"#utility.yul\":1063:1065   */\n      iszero\n      tag_49\n      jumpi\n        /* \"#utility.yul\":1093:1111   */\n      tag_49\n      tag_50\n      jump\t// in\n    tag_49:\n        /* \"#utility.yul\":1143:1145   */\n      dup1\n        /* \"#utility.yul\":1133:1141   */\n      dup7\n        /* \"#utility.yul\":1129:1146   */\n      and\n        /* \"#utility.yul\":1126:1128   */\n      iszero\n      tag_51\n      jumpi\n        /* \"#utility.yul\":1158:1174   */\n      swap2\n      dup2\n      mul\n      swap2\n        /* \"#utility.yul\":1126:1128   */\n    tag_51:\n      pop\n        /* \"#utility.yul\":1251:1255   */\n      0x02\n        /* \"#utility.yul\":1237:1256   */\n      swap1\n      swap5\n      div\n      swap4\n        /* \"#utility.yul\":1197:1212   */\n      dup1\n      mul\n        /* \"#utility.yul\":950:1266   */\n      jump(tag_44)\n    tag_46:\n        /* \"#utility.yul\":894:1272   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1277:1416   */\n    tag_19:\n      0x00\n        /* \"#utility.yul\":1366:1410   */\n      tag_53\n      not(0x00)\n        /* \"#utility.yul\":1393:1401   */\n      dup5\n        /* \"#utility.yul\":1387:1391   */\n      dup5\n        /* \"#utility.yul\":1366:1410   */\n      tag_54\n      jump\t// in\n    tag_53:\n        /* \"#utility.yul\":1357:1410   */\n      swap4\n        /* \"#utility.yul\":1347:1416   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1421:2343   */\n    tag_54:\n      0x00\n        /* \"#utility.yul\":1505:1513   */\n      dup3\n        /* \"#utility.yul\":1495:1497   */\n      tag_56\n      jumpi\n      pop\n        /* \"#utility.yul\":1546:1547   */\n      0x01\n        /* \"#utility.yul\":1560:1565   */\n      jump(tag_53)\n        /* \"#utility.yul\":1495:1497   */\n    tag_56:\n        /* \"#utility.yul\":1594:1598   */\n      dup2\n        /* \"#utility.yul\":1584:1586   */\n      tag_57\n      jumpi\n      pop\n        /* \"#utility.yul\":1631:1632   */\n      0x00\n        /* \"#utility.yul\":1645:1650   */\n      jump(tag_53)\n        /* \"#utility.yul\":1584:1586   */\n    tag_57:\n        /* \"#utility.yul\":1676:1680   */\n      dup2\n        /* \"#utility.yul\":1694:1695   */\n      0x01\n        /* \"#utility.yul\":1689:1748   */\n      dup2\n      eq\n      tag_59\n      jumpi\n        /* \"#utility.yul\":1762:1763   */\n      0x02\n        /* \"#utility.yul\":1757:1940   */\n      dup2\n      eq\n      tag_60\n      jumpi\n        /* \"#utility.yul\":1669:1940   */\n      jump(tag_58)\n        /* \"#utility.yul\":1689:1748   */\n    tag_59:\n        /* \"#utility.yul\":1719:1720   */\n      0x01\n        /* \"#utility.yul\":1710:1720   */\n      swap2\n      pop\n        /* \"#utility.yul\":1733:1738   */\n      pop\n      jump(tag_53)\n        /* \"#utility.yul\":1757:1940   */\n    tag_60:\n        /* \"#utility.yul\":1794:1797   */\n      0xff\n        /* \"#utility.yul\":1784:1792   */\n      dup5\n        /* \"#utility.yul\":1781:1798   */\n      gt\n        /* \"#utility.yul\":1778:1780   */\n      iszero\n      tag_62\n      jumpi\n        /* \"#utility.yul\":1801:1819   */\n      tag_62\n      tag_50\n      jump\t// in\n    tag_62:\n        /* \"#utility.yul\":1850:1858   */\n      dup4\n        /* \"#utility.yul\":1847:1848   */\n      0x02\n        /* \"#utility.yul\":1843:1859   */\n      exp\n        /* \"#utility.yul\":1834:1859   */\n      swap2\n      pop\n        /* \"#utility.yul\":1885:1888   */\n      dup5\n        /* \"#utility.yul\":1878:1883   */\n      dup3\n        /* \"#utility.yul\":1875:1889   */\n      gt\n        /* \"#utility.yul\":1872:1874   */\n      iszero\n      tag_64\n      jumpi\n        /* \"#utility.yul\":1892:1910   */\n      tag_64\n      tag_50\n      jump\t// in\n    tag_64:\n        /* \"#utility.yul\":1925:1930   */\n      pop\n      jump(tag_53)\n        /* \"#utility.yul\":1669:1940   */\n    tag_58:\n      pop\n        /* \"#utility.yul\":2024:2026   */\n      0x20\n        /* \"#utility.yul\":2014:2022   */\n      dup4\n        /* \"#utility.yul\":2011:2027   */\n      lt\n        /* \"#utility.yul\":2005:2008   */\n      0x0133\n        /* \"#utility.yul\":1999:2003   */\n      dup4\n        /* \"#utility.yul\":1996:2009   */\n      lt\n        /* \"#utility.yul\":1992:2028   */\n      and\n        /* \"#utility.yul\":1986:1988   */\n      0x4e\n        /* \"#utility.yul\":1976:1984   */\n      dup5\n        /* \"#utility.yul\":1973:1989   */\n      lt\n        /* \"#utility.yul\":1968:1970   */\n      0x0b\n        /* \"#utility.yul\":1962:1966   */\n      dup5\n        /* \"#utility.yul\":1959:1971   */\n      lt\n        /* \"#utility.yul\":1955:1990   */\n      and\n        /* \"#utility.yul\":1952:2029   */\n      or\n        /* \"#utility.yul\":1949:1951   */\n      iszero\n      tag_65\n      jumpi\n      pop\n        /* \"#utility.yul\":2061:2080   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":2096:2110   */\n      dup4\n      dup2\n      gt\n        /* \"#utility.yul\":2093:2095   */\n      iszero\n      tag_67\n      jumpi\n        /* \"#utility.yul\":2113:2131   */\n      tag_67\n      tag_50\n      jump\t// in\n    tag_67:\n        /* \"#utility.yul\":2146:2151   */\n      jump(tag_53)\n        /* \"#utility.yul\":1949:1951   */\n    tag_65:\n        /* \"#utility.yul\":2193:2235   */\n      tag_68\n        /* \"#utility.yul\":2231:2234   */\n      dup5\n        /* \"#utility.yul\":2221:2229   */\n      dup5\n        /* \"#utility.yul\":2215:2219   */\n      dup5\n        /* \"#utility.yul\":2212:2213   */\n      0x01\n        /* \"#utility.yul\":2193:2235   */\n      tag_42\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":2268:2274   */\n      dup1\n        /* \"#utility.yul\":2263:2266   */\n      dup7\n        /* \"#utility.yul\":2259:2275   */\n      div\n        /* \"#utility.yul\":2250:2257   */\n      dup3\n        /* \"#utility.yul\":2247:2276   */\n      gt\n        /* \"#utility.yul\":2244:2246   */\n      iszero\n      tag_70\n      jumpi\n        /* \"#utility.yul\":2279:2297   */\n      tag_70\n      tag_50\n      jump\t// in\n    tag_70:\n        /* \"#utility.yul\":2317:2337   */\n      mul\n      swap5\n        /* \"#utility.yul\":1485:2343   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2348:2516   */\n    tag_17:\n      0x00\n        /* \"#utility.yul\":2454:2455   */\n      dup2\n        /* \"#utility.yul\":2450:2451   */\n      0x00\n        /* \"#utility.yul\":2446:2452   */\n      not\n        /* \"#utility.yul\":2442:2456   */\n      div\n        /* \"#utility.yul\":2439:2440   */\n      dup4\n        /* \"#utility.yul\":2436:2457   */\n      gt\n        /* \"#utility.yul\":2431:2432   */\n      dup3\n        /* \"#utility.yul\":2424:2433   */\n      iszero\n        /* \"#utility.yul\":2417:2434   */\n      iszero\n        /* \"#utility.yul\":2413:2458   */\n      and\n        /* \"#utility.yul\":2410:2412   */\n      iszero\n      tag_73\n      jumpi\n        /* \"#utility.yul\":2461:2479   */\n      tag_73\n      tag_50\n      jump\t// in\n    tag_73:\n      pop\n        /* \"#utility.yul\":2501:2510   */\n      mul\n      swap1\n        /* \"#utility.yul\":2400:2516   */\n      jump\t// out\n        /* \"#utility.yul\":2521:2656   */\n    tag_24:\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":2581:2598   */\n      dup3\n      eq\n        /* \"#utility.yul\":2578:2580   */\n      iszero\n      tag_76\n      jumpi\n        /* \"#utility.yul\":2601:2619   */\n      tag_76\n      tag_50\n      jump\t// in\n    tag_76:\n      pop\n        /* \"#utility.yul\":2648:2649   */\n      0x01\n        /* \"#utility.yul\":2637:2650   */\n      add\n      swap1\n        /* \"#utility.yul\":2568:2656   */\n      jump\t// out\n        /* \"#utility.yul\":2661:2845   */\n    tag_50:\n      mul(0x4e487b71, exp(0x02, 0xe0))\n        /* \"#utility.yul\":2710:2711   */\n      0x00\n        /* \"#utility.yul\":2703:2791   */\n      mstore\n        /* \"#utility.yul\":2810:2814   */\n      0x11\n        /* \"#utility.yul\":2807:2808   */\n      0x04\n        /* \"#utility.yul\":2800:2815   */\n      mstore\n        /* \"#utility.yul\":2834:2838   */\n      0x24\n        /* \"#utility.yul\":2831:2832   */\n      0x00\n        /* \"#utility.yul\":2824:2839   */\n      revert\n\n    auxdata: 0xa264697066735822122047d73dbcb8d784beb8d4fc6a85dba4c76adc5ba0c05800f4c0458c6239c7289564736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506104bc806100206000396000f3fe608060405234801561001057600080fd5b5060043610610047577c01000000000000000000000000000000000000000000000000000000006000350463db91bb50811461004c575b600080fd5b61005f61005a3660046102a6565b610075565b60405161006c91906102be565b60405180910390f35b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156101675760006100b4826008610433565b6100bf906002610359565b6100c99087610433565b90507fff0000000000000000000000000000000000000000000000000000000000000081161561015457808484815181106101175760e060020a634e487b7102600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508261015081610452565b9350505b508061015f81610452565b91505061009e565b5060008167ffffffffffffffff8111156101945760e060020a634e487b7102600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156101be576020820181803683370190505b50905060005b8281101561029d578381815181106101ef5760e060020a634e487b7102600052603260045260246000fd5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811061025c5760e060020a634e487b7102600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061029581610452565b9150506101c4565b50949350505050565b6000602082840312156102b7578081fd5b5035919050565b6000602080835283518082850152825b818110156102ea578581018301518582016040015282016102ce565b818111156102fb5783604083870101525b50601f01601f1916929092016040019392505050565b80825b60018086116103235750610350565b8187048211156103355761033561046d565b8086161561034257918102915b506002909404938002610314565b94509492505050565b6000610368600019848461036f565b9392505050565b60008261037e57506001610368565b8161038b57506000610368565b81600181146103a157600281146103ab576103d8565b6001915050610368565b60ff8411156103bc576103bc61046d565b8360020a9150848211156103d2576103d261046d565b50610368565b5060208310610133831016604e8410600b841016171561040b575081810a838111156104065761040661046d565b610368565b6104188484846001610311565b80860482111561042a5761042a61046d565b02949350505050565b600081600019048311821515161561044d5761044d61046d565b500290565b60006000198214156104665761046661046d565b5060010190565b60e060020a634e487b7102600052601160045260246000fdfea264697066735822122047d73dbcb8d784beb8d4fc6a85dba4c76adc5ba0c05800f4c0458c6239c7289564736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x47 JUMPI PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV PUSH4 0xDB91BB50 DUP2 EQ PUSH2 0x4C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F PUSH2 0x5A CALLDATASIZE PUSH1 0x4 PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0x75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6C SWAP2 SWAP1 PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 PUSH2 0xB4 DUP3 PUSH1 0x8 PUSH2 0x433 JUMP JUMPDEST PUSH2 0xBF SWAP1 PUSH1 0x2 PUSH2 0x359 JUMP JUMPDEST PUSH2 0xC9 SWAP1 DUP8 PUSH2 0x433 JUMP JUMPDEST SWAP1 POP PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0x154 JUMPI DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x117 JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP3 PUSH2 0x150 DUP2 PUSH2 0x452 JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP DUP1 PUSH2 0x15F DUP2 PUSH2 0x452 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9E JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194 JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BE JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29D JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1EF JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25C JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH2 0x295 DUP2 PUSH2 0x452 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C4 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2EA JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x2CE JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2FB JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0x323 JUMPI POP PUSH2 0x350 JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0x335 JUMPI PUSH2 0x335 PUSH2 0x46D JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0x342 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST POP PUSH1 0x2 SWAP1 SWAP5 DIV SWAP4 DUP1 MUL PUSH2 0x314 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368 PUSH1 0x0 NOT DUP5 DUP5 PUSH2 0x36F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x37E JUMPI POP PUSH1 0x1 PUSH2 0x368 JUMP JUMPDEST DUP2 PUSH2 0x38B JUMPI POP PUSH1 0x0 PUSH2 0x368 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x3A1 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x3AB JUMPI PUSH2 0x3D8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x368 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x3BC JUMPI PUSH2 0x3BC PUSH2 0x46D JUMP JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x3D2 JUMPI PUSH2 0x3D2 PUSH2 0x46D JUMP JUMPDEST POP PUSH2 0x368 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x40B JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0x406 JUMPI PUSH2 0x406 PUSH2 0x46D JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST PUSH2 0x418 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x311 JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0x42A JUMPI PUSH2 0x42A PUSH2 0x46D JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x44D JUMPI PUSH2 0x44D PUSH2 0x46D JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x466 JUMPI PUSH2 0x466 PUSH2 0x46D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xD7 RETURNDATASIZE 0xBC 0xB8 0xD7 DUP5 0xBE 0xB8 0xD4 0xFC PUSH11 0x85DBA4C76ADC5BA0C05800 DELEGATECALL 0xC0 GASLIMIT DUP13 PUSH3 0x39C728 SWAP6 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "122:1788:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2847:3",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:3",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:120:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "139:6:3"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "147:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:3"
															},
															"nodeType": "YulIf",
															"src": "94:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "165:33:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "188:9:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "175:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "175:23:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "165:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:3",
														"type": ""
													}
												],
												"src": "14:190:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "330:482:3",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "340:12:3",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "350:2:3",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "344:2:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "368:9:3"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "379:2:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "361:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "361:21:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "361:21:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "391:27:3",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "411:6:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "405:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "405:13:3"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "395:6:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "438:9:3"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "449:2:3"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "434:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "434:18:3"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "454:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "427:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "427:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "427:34:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "470:13:3",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "479:4:3"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "474:1:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "542:90:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "571:9:3"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "582:1:3"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "567:3:3"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "567:17:3"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "586:2:3",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "563:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "563:26:3"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "605:6:3"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "613:1:3"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "601:3:3"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "601:14:3"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "617:2:3"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "597:3:3"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "597:23:3"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "591:5:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "591:30:3"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "556:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "556:66:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "556:66:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "503:1:3"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "506:6:3"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "500:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "500:13:3"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "514:19:3",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "516:15:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "525:1:3"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "528:2:3"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "521:3:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "521:10:3"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "516:1:3"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "496:3:3",
																"statements": []
															},
															"src": "492:140:3"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "666:69:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "695:9:3"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "706:6:3"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "691:3:3"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "691:22:3"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "715:2:3",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "687:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "687:31:3"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "720:4:3"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "680:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "680:45:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "680:45:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "647:1:3"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "650:6:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "644:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "644:13:3"
															},
															"nodeType": "YulIf",
															"src": "641:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "744:62:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "760:9:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "779:6:3"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "787:2:3",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "775:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "775:15:3"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "796:2:3",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "792:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "792:7:3"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "771:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "771:29:3"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "756:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "756:45:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "803:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "752:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "752:54:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "744:4:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "299:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "310:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "321:4:3",
														"type": ""
													}
												],
												"src": "209:603:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "894:378:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "904:15:3",
															"value": {
																"name": "_power",
																"nodeType": "YulIdentifier",
																"src": "913:6:3"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "904:5:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "928:13:3",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "936:5:3"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "928:4:3"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "975:291:3",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "989:11:3",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "999:1:3",
																			"type": "",
																			"value": "1"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "993:2:3",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "1041:9:3",
																			"statements": [
																				{
																					"nodeType": "YulBreak",
																					"src": "1043:5:3"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "1026:8:3"
																						},
																						{
																							"name": "_1",
																							"nodeType": "YulIdentifier",
																							"src": "1036:2:3"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "1023:2:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1023:16:3"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "1016:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1016:24:3"
																		},
																		"nodeType": "YulIf",
																		"src": "1013:2:3"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "1091:22:3",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "1093:16:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1093:18:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "1093:18:3"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "1069:4:3"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "1079:3:3"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "1084:4:3"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "1075:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1075:14:3"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "1066:2:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1066:24:3"
																		},
																		"nodeType": "YulIf",
																		"src": "1063:2:3"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "1147:29:3",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "1149:25:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "1162:5:3"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "1169:4:3"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "1158:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1158:16:3"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "1149:5:3"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "1133:8:3"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1143:2:3"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1129:3:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1129:17:3"
																		},
																		"nodeType": "YulIf",
																		"src": "1126:2:3"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1189:23:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "1201:4:3"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "1207:4:3"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "1197:3:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1197:15:3"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "1189:4:3"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1225:31:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "1241:8:3"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1251:4:3",
																					"type": "",
																					"value": "0x02"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1237:3:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1237:19:3"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "1225:8:3"
																			}
																		]
																	}
																]
															},
															"condition": {
																"kind": "bool",
																"nodeType": "YulLiteral",
																"src": "958:4:3",
																"type": "",
																"value": "true"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "963:3:3",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "954:3:3",
																"statements": []
															},
															"src": "950:316:3"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nodeType": "YulTypedName",
														"src": "845:6:3",
														"type": ""
													},
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "853:5:3",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "860:8:3",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "870:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "878:5:3",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "885:4:3",
														"type": ""
													}
												],
												"src": "817:455:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1347:69:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1357:53:3",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "1387:4:3"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "1393:8:3"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1407:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1403:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1403:6:3"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "1366:20:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1366:44:3"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "1357:5:3"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "1318:4:3",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "1324:8:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "1337:5:3",
														"type": ""
													}
												],
												"src": "1277:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1485:858:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1523:52:3",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1537:10:3",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1546:1:3",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "1537:5:3"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "1560:5:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "1505:8:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1498:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1498:16:3"
															},
															"nodeType": "YulIf",
															"src": "1495:2:3"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1608:52:3",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1622:10:3",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1631:1:3",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "1622:5:3"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "1645:5:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "1594:4:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1587:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1587:12:3"
															},
															"nodeType": "YulIf",
															"src": "1584:2:3"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1696:52:3",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "1710:10:3",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1719:1:3",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "1710:5:3"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "1733:5:3"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "1689:59:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1694:1:3",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1764:176:3",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "1799:22:3",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "1801:16:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1801:18:3"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "1801:18:3"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "1784:8:3"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1794:3:3",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "1781:2:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1781:17:3"
																				},
																				"nodeType": "YulIf",
																				"src": "1778:2:3"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "1834:25:3",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1847:1:3",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "1850:8:3"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nodeType": "YulIdentifier",
																						"src": "1843:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1843:16:3"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "1834:5:3"
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "1890:22:3",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "1892:16:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1892:18:3"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "1892:18:3"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "1878:5:3"
																						},
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "1885:3:3"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "1875:2:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1875:14:3"
																				},
																				"nodeType": "YulIf",
																				"src": "1872:2:3"
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "1925:5:3"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "1757:183:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1762:1:3",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "1676:4:3"
															},
															"nodeType": "YulSwitch",
															"src": "1669:271:3"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2038:123:3",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2052:28:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "2065:4:3"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "2071:8:3"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "2061:3:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2061:19:3"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "2052:5:3"
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "2111:22:3",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "2113:16:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2113:18:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "2113:18:3"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nodeType": "YulIdentifier",
																					"src": "2099:5:3"
																				},
																				{
																					"name": "max",
																					"nodeType": "YulIdentifier",
																					"src": "2106:3:3"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "2096:2:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2096:14:3"
																		},
																		"nodeType": "YulIf",
																		"src": "2093:2:3"
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "2146:5:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "1962:4:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1968:2:3",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "1959:2:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1959:12:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "1976:8:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1986:2:3",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "1973:2:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1973:16:3"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1955:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1955:35:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "1999:4:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2005:3:3",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "1996:2:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1996:13:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "2014:8:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2024:2:3",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2011:2:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2011:16:3"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1992:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1992:36:3"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1952:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:77:3"
															},
															"nodeType": "YulIf",
															"src": "1949:2:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2170:65:3",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2212:1:3",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "2215:4:3"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "2221:8:3"
																	},
																	{
																		"name": "max",
																		"nodeType": "YulIdentifier",
																		"src": "2231:3:3"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "2193:18:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2193:42:3"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "2174:7:3",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "2183:6:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2277:22:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2279:16:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2279:18:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2279:18:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "2250:7:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nodeType": "YulIdentifier",
																				"src": "2263:3:3"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "2268:6:3"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "2259:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2259:16:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2247:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2247:29:3"
															},
															"nodeType": "YulIf",
															"src": "2244:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2308:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "2321:7:3"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "2330:6:3"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2317:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2317:20:3"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "2308:5:3"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "1451:4:3",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "1457:8:3",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "1467:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "1475:5:3",
														"type": ""
													}
												],
												"src": "1421:922:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2400:116:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2459:22:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2461:16:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2461:18:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2461:18:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2431:1:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2424:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2424:9:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2417:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2417:17:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2439:1:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2450:1:3",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2446:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2446:6:3"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2454:1:3"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "2442:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2442:14:3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2436:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2436:21:3"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2413:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2413:45:3"
															},
															"nodeType": "YulIf",
															"src": "2410:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2490:20:3",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2505:1:3"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2508:1:3"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2501:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2501:9:3"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2490:7:3"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2379:1:3",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2382:1:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "2388:7:3",
														"type": ""
													}
												],
												"src": "2348:168:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2568:88:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2599:22:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2601:16:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2601:18:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2601:18:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2584:5:3"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2595:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2591:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2591:6:3"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2581:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2581:17:3"
															},
															"nodeType": "YulIf",
															"src": "2578:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2630:20:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2641:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2648:1:3",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2637:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2637:13:3"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2630:3:3"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2550:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2560:3:3",
														"type": ""
													}
												],
												"src": "2521:135:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2693:152:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2710:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2713:77:3",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2703:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2703:88:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2703:88:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2807:1:3",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2810:4:3",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2800:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2800:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2800:15:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2831:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2834:4:3",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2824:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2824:15:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2824:15:3"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2661:184:3"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base\n    {\n        power := _power\n        base := _base\n        for { } true { }\n        {\n            let _1 := 1\n            if iszero(gt(exponent, _1)) { break }\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, _1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := div(exponent, 0x02)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent, not(0))\n    }\n    function checked_exp_unsigned(base, exponent, max) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(1, base, exponent, max)\n        if gt(power_1, div(max, base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060043610610047577c01000000000000000000000000000000000000000000000000000000006000350463db91bb50811461004c575b600080fd5b61005f61005a3660046102a6565b610075565b60405161006c91906102be565b60405180910390f35b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156101675760006100b4826008610433565b6100bf906002610359565b6100c99087610433565b90507fff0000000000000000000000000000000000000000000000000000000000000081161561015457808484815181106101175760e060020a634e487b7102600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508261015081610452565b9350505b508061015f81610452565b91505061009e565b5060008167ffffffffffffffff8111156101945760e060020a634e487b7102600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156101be576020820181803683370190505b50905060005b8281101561029d578381815181106101ef5760e060020a634e487b7102600052603260045260246000fd5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811061025c5760e060020a634e487b7102600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061029581610452565b9150506101c4565b50949350505050565b6000602082840312156102b7578081fd5b5035919050565b6000602080835283518082850152825b818110156102ea578581018301518582016040015282016102ce565b818111156102fb5783604083870101525b50601f01601f1916929092016040019392505050565b80825b60018086116103235750610350565b8187048211156103355761033561046d565b8086161561034257918102915b506002909404938002610314565b94509492505050565b6000610368600019848461036f565b9392505050565b60008261037e57506001610368565b8161038b57506000610368565b81600181146103a157600281146103ab576103d8565b6001915050610368565b60ff8411156103bc576103bc61046d565b8360020a9150848211156103d2576103d261046d565b50610368565b5060208310610133831016604e8410600b841016171561040b575081810a838111156104065761040661046d565b610368565b6104188484846001610311565b80860482111561042a5761042a61046d565b02949350505050565b600081600019048311821515161561044d5761044d61046d565b500290565b60006000198214156104665761046661046d565b5060010190565b60e060020a634e487b7102600052601160045260246000fdfea264697066735822122047d73dbcb8d784beb8d4fc6a85dba4c76adc5ba0c05800f4c0458c6239c7289564736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x47 JUMPI PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV PUSH4 0xDB91BB50 DUP2 EQ PUSH2 0x4C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F PUSH2 0x5A CALLDATASIZE PUSH1 0x4 PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0x75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6C SWAP2 SWAP1 PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 PUSH2 0xB4 DUP3 PUSH1 0x8 PUSH2 0x433 JUMP JUMPDEST PUSH2 0xBF SWAP1 PUSH1 0x2 PUSH2 0x359 JUMP JUMPDEST PUSH2 0xC9 SWAP1 DUP8 PUSH2 0x433 JUMP JUMPDEST SWAP1 POP PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0x154 JUMPI DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x117 JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP3 PUSH2 0x150 DUP2 PUSH2 0x452 JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP DUP1 PUSH2 0x15F DUP2 PUSH2 0x452 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9E JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194 JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BE JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x29D JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1EF JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 MUL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25C JUMPI PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH2 0x295 DUP2 PUSH2 0x452 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1C4 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B7 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2EA JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x2CE JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2FB JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH2 0x323 JUMPI POP PUSH2 0x350 JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH2 0x335 JUMPI PUSH2 0x335 PUSH2 0x46D JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH2 0x342 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST POP PUSH1 0x2 SWAP1 SWAP5 DIV SWAP4 DUP1 MUL PUSH2 0x314 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368 PUSH1 0x0 NOT DUP5 DUP5 PUSH2 0x36F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x37E JUMPI POP PUSH1 0x1 PUSH2 0x368 JUMP JUMPDEST DUP2 PUSH2 0x38B JUMPI POP PUSH1 0x0 PUSH2 0x368 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x3A1 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x3AB JUMPI PUSH2 0x3D8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x368 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x3BC JUMPI PUSH2 0x3BC PUSH2 0x46D JUMP JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x3D2 JUMPI PUSH2 0x3D2 PUSH2 0x46D JUMP JUMPDEST POP PUSH2 0x368 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x40B JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH2 0x406 JUMPI PUSH2 0x406 PUSH2 0x46D JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST PUSH2 0x418 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x311 JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH2 0x42A JUMPI PUSH2 0x42A PUSH2 0x46D JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x44D JUMPI PUSH2 0x44D PUSH2 0x46D JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x466 JUMPI PUSH2 0x466 PUSH2 0x46D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0x4E487B71 MUL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xD7 RETURNDATASIZE 0xBC 0xB8 0xD7 DUP5 0xBE 0xB8 0xD4 0xFC PUSH11 0x85DBA4C76ADC5BA0C05800 DELEGATECALL 0xC0 GASLIMIT DUP13 PUSH3 0x39C728 SWAP6 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "122:1788:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;143:1765;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;346:13;;;356:2;346:13;;;;;;;;;214;;315:28;;346:13;;;;;;;;;;;-1:-1:-1;346:13:2;315:44;;498:18;576:21;571:813;619:2;603:13;:18;571:813;;;1065:12;1118:17;1122:13;1118:1;:17;:::i;:::-;1112:24;;:1;:24;:::i;:::-;1095:41;;1103:5;1095:41;:::i;:::-;1087:50;-1:-1:-1;1193:10:2;;;;1189:189;;1289:5;1259:15;1275:10;1259:27;;;;;;-1:-1:-1;;;;;1259:27:2;;;;;;;;;;;;:35;;;;;;;;;;-1:-1:-1;1355:12:2;;;;:::i;:::-;;;;1189:189;-1:-1:-1;623:15:2;;;;:::i;:::-;;;;571:813;;;;1454:35;1502:10;1492:21;;;;;;-1:-1:-1;;;;;1492:21:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1492:21:2;;1454:59;;1576:20;1571:235;1617:10;1602:12;:25;1571:235;;;1770:15;1786:12;1770:29;;;;;;-1:-1:-1;;;;;1770:29:2;;;;;;;;;;;;;;;;;;1731:22;1754:12;1731:36;;;;;;-1:-1:-1;;;;;1731:36:2;;;;;;;;;;;;:68;;;;;;;;;;-1:-1:-1;1629:14:2;;;;:::i;:::-;;;;1571:235;;;-1:-1:-1;1878:22:2;143:1765;-1:-1:-1;;;;143:1765:2:o;14:190:3:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;-1:-1:-1;175:23:3;;84:120;-1:-1:-1;84:120:3:o;209:603::-;;350:2;379;368:9;361:21;411:6;405:13;454:6;449:2;438:9;434:18;427:34;479:4;492:140;506:6;503:1;500:13;492:140;;;601:14;;;597:23;;591:30;567:17;;;586:2;563:26;556:66;521:10;;492:140;;;650:6;647:1;644:13;641:2;;;720:4;715:2;706:6;695:9;691:22;687:31;680:45;641:2;-1:-1:-1;796:2:3;775:15;-1:-1:-1;;771:29:3;756:45;;;;803:2;752:54;;330:482;-1:-1:-1;;;330:482:3:o;817:455::-;913:6;936:5;950:316;999:1;1036:2;1026:8;1023:16;1013:2;;1043:5;;;1013:2;1084:4;1079:3;1075:14;1069:4;1066:24;1063:2;;;1093:18;;:::i;:::-;1143:2;1133:8;1129:17;1126:2;;;1158:16;;;;1126:2;-1:-1:-1;1251:4:3;1237:19;;;;1197:15;;950:316;;;894:378;;;;;;;:::o;1277:139::-;;1366:44;-1:-1:-1;;1393:8:3;1387:4;1366:44;:::i;:::-;1357:53;1347:69;-1:-1:-1;;;1347:69:3:o;1421:922::-;;1505:8;1495:2;;-1:-1:-1;1546:1:3;1560:5;;1495:2;1594:4;1584:2;;-1:-1:-1;1631:1:3;1645:5;;1584:2;1676:4;1694:1;1689:59;;;;1762:1;1757:183;;;;1669:271;;1689:59;1719:1;1710:10;;1733:5;;;1757:183;1794:3;1784:8;1781:17;1778:2;;;1801:18;;:::i;:::-;1850:8;1847:1;1843:16;1834:25;;1885:3;1878:5;1875:14;1872:2;;;1892:18;;:::i;:::-;1925:5;;;1669:271;;2024:2;2014:8;2011:16;2005:3;1999:4;1996:13;1992:36;1986:2;1976:8;1973:16;1968:2;1962:4;1959:12;1955:35;1952:77;1949:2;;;-1:-1:-1;2061:19:3;;;2096:14;;;2093:2;;;2113:18;;:::i;:::-;2146:5;;1949:2;2193:42;2231:3;2221:8;2215:4;2212:1;2193:42;:::i;:::-;2268:6;2263:3;2259:16;2250:7;2247:29;2244:2;;;2279:18;;:::i;:::-;2317:20;;1485:858;-1:-1:-1;;;;1485:858:3:o;2348:168::-;;2454:1;2450;2446:6;2442:14;2439:1;2436:21;2431:1;2424:9;2417:17;2413:45;2410:2;;;2461:18;;:::i;:::-;-1:-1:-1;2501:9:3;;2400:116::o;2521:135::-;;-1:-1:-1;;2581:17:3;;2578:2;;;2601:18;;:::i;:::-;-1:-1:-1;2648:1:3;2637:13;;2568:88::o;2661:184::-;-1:-1:-1;;;;;2710:1:3;2703:88;2810:4;2807:1;2800:15;2834:4;2831:1;2824:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "242400",
								"executionCost": "281",
								"totalCost": "242681"
							},
							"external": {
								"toShortString(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 122,
									"end": 1910,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122047d73dbcb8d784beb8d4fc6a85dba4c76adc5ba0c05800f4c0458c6239c7289564736f6c63430008000033",
									".code": [
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "DB91BB50"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 122,
											"end": 1910,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 356,
											"end": 358,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 214,
											"end": 227,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 214,
											"end": 227,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 315,
											"end": 343,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 315,
											"end": 343,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 346,
											"end": 359,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 346,
											"end": 359,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 315,
											"end": 359,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 315,
											"end": 359,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 498,
											"end": 516,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 576,
											"end": 597,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 619,
											"end": 621,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 603,
											"end": 616,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 603,
											"end": 621,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1065,
											"end": 1077,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1118,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1122,
											"end": 1135,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1118,
											"end": 1119,
											"name": "PUSH",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1118,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1118,
											"end": 1135,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1118,
											"end": 1135,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1118,
											"end": 1135,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1112,
											"end": 1113,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1095,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1095,
											"end": 1136,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1103,
											"end": 1108,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1095,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1095,
											"end": 1136,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1095,
											"end": 1136,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1095,
											"end": 1136,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1087,
											"end": 1137,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1193,
											"end": 1203,
											"name": "PUSH",
											"source": 2,
											"value": "FF00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1193,
											"end": 1203,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1193,
											"end": 1203,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1193,
											"end": 1203,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1189,
											"end": 1378,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1189,
											"end": 1378,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1289,
											"end": 1294,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1274,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1275,
											"end": 1285,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1286,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "BYTE",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1259,
											"end": 1294,
											"name": "MSTORE8",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1367,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1189,
											"end": 1378,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1189,
											"end": 1378,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 623,
											"end": 638,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 623,
											"end": 638,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 623,
											"end": 638,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 623,
											"end": 638,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 623,
											"end": 638,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 623,
											"end": 638,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 623,
											"end": 638,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 623,
											"end": 638,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 623,
											"end": 638,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 623,
											"end": 638,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 571,
											"end": 1384,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1454,
											"end": 1489,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1502,
											"end": 1512,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1492,
											"end": 1513,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1454,
											"end": 1513,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1454,
											"end": 1513,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1576,
											"end": 1596,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1617,
											"end": 1627,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1602,
											"end": 1614,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1602,
											"end": 1627,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1786,
											"end": 1798,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1770,
											"end": 1799,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1753,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1754,
											"end": 1766,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1767,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "BYTE",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1731,
											"end": 1799,
											"name": "MSTORE8",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1629,
											"end": 1643,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 1571,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1878,
											"end": 1900,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 143,
											"end": 1908,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 204,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 14,
											"end": 204,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 14,
											"end": 204,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 94,
											"end": 96,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 94,
											"end": 96,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 147,
											"end": 153,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 139,
											"end": 145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 132,
											"end": 154,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 94,
											"end": 96,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 175,
											"end": 198,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 175,
											"end": 198,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 84,
											"end": 204,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 84,
											"end": 204,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 209,
											"end": 812,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 209,
											"end": 812,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 209,
											"end": 812,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 350,
											"end": 352,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 379,
											"end": 381,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 368,
											"end": 377,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 361,
											"end": 382,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 411,
											"end": 417,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 405,
											"end": 418,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 454,
											"end": 460,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 449,
											"end": 451,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 438,
											"end": 447,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 434,
											"end": 452,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 427,
											"end": 461,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 479,
											"end": 483,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 492,
											"end": 632,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 492,
											"end": 632,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 506,
											"end": 512,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 503,
											"end": 504,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 500,
											"end": 513,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 492,
											"end": 632,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 492,
											"end": 632,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 492,
											"end": 632,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 601,
											"end": 615,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 601,
											"end": 615,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 601,
											"end": 615,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 597,
											"end": 620,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 597,
											"end": 620,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 591,
											"end": 621,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 567,
											"end": 584,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 567,
											"end": 584,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 567,
											"end": 584,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 586,
											"end": 588,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 563,
											"end": 589,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 556,
											"end": 622,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 521,
											"end": 531,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 521,
											"end": 531,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 492,
											"end": 632,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 492,
											"end": 632,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 492,
											"end": 632,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 492,
											"end": 632,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 650,
											"end": 656,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 647,
											"end": 648,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 644,
											"end": 657,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 641,
											"end": 643,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 641,
											"end": 643,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 641,
											"end": 643,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 720,
											"end": 724,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 715,
											"end": 717,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 706,
											"end": 712,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 695,
											"end": 704,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 691,
											"end": 713,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 687,
											"end": 718,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 680,
											"end": 725,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 641,
											"end": 643,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 641,
											"end": 643,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 796,
											"end": 798,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 775,
											"end": 790,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 771,
											"end": 800,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 756,
											"end": 801,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 756,
											"end": 801,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 756,
											"end": 801,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 756,
											"end": 801,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 803,
											"end": 805,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 752,
											"end": 806,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 752,
											"end": 806,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 330,
											"end": 812,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 330,
											"end": 812,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 817,
											"end": 1272,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 817,
											"end": 1272,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 913,
											"end": 919,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 936,
											"end": 941,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 950,
											"end": 1266,
											"name": "tag",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 950,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 999,
											"end": 1000,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1036,
											"end": 1038,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1026,
											"end": 1034,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1023,
											"end": 1039,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1013,
											"end": 1015,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1013,
											"end": 1015,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1043,
											"end": 1048,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1043,
											"end": 1048,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1043,
											"end": 1048,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1013,
											"end": 1015,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1013,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1084,
											"end": 1088,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1079,
											"end": 1082,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 1075,
											"end": 1089,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 1069,
											"end": 1073,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1066,
											"end": 1090,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1063,
											"end": 1065,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1063,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1063,
											"end": 1065,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1093,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1093,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1093,
											"end": 1111,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1093,
											"end": 1111,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 1093,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1145,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1133,
											"end": 1141,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1129,
											"end": 1146,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1126,
											"end": 1128,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1126,
											"end": 1128,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 1126,
											"end": 1128,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1158,
											"end": 1174,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1158,
											"end": 1174,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1158,
											"end": 1174,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 1158,
											"end": 1174,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1126,
											"end": 1128,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 1126,
											"end": 1128,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1251,
											"end": 1255,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1237,
											"end": 1256,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1237,
											"end": 1256,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1237,
											"end": 1256,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 1237,
											"end": 1256,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1212,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1212,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 950,
											"end": 1266,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 950,
											"end": 1266,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 950,
											"end": 1266,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 950,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 894,
											"end": 1272,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1277,
											"end": 1416,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 1277,
											"end": 1416,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1277,
											"end": 1416,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1366,
											"end": 1410,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1393,
											"end": 1401,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1387,
											"end": 1391,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1366,
											"end": 1410,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1366,
											"end": 1410,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1366,
											"end": 1410,
											"name": "tag",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1366,
											"end": 1410,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1357,
											"end": 1410,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1347,
											"end": 1416,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1347,
											"end": 1416,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1421,
											"end": 2343,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1421,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1421,
											"end": 2343,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1505,
											"end": 1513,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1495,
											"end": 1497,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1495,
											"end": 1497,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1546,
											"end": 1547,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1560,
											"end": 1565,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1560,
											"end": 1565,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1495,
											"end": 1497,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 1495,
											"end": 1497,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1594,
											"end": 1598,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1584,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 1584,
											"end": 1586,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1631,
											"end": 1632,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1645,
											"end": 1650,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1645,
											"end": 1650,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1584,
											"end": 1586,
											"name": "tag",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 1584,
											"end": 1586,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1676,
											"end": 1680,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1694,
											"end": 1695,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1689,
											"end": 1748,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1689,
											"end": 1748,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1689,
											"end": 1748,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 1689,
											"end": 1748,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1762,
											"end": 1763,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1757,
											"end": 1940,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1757,
											"end": 1940,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1757,
											"end": 1940,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1757,
											"end": 1940,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1940,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1669,
											"end": 1940,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1689,
											"end": 1748,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 1689,
											"end": 1748,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1719,
											"end": 1720,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 1710,
											"end": 1720,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1710,
											"end": 1720,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1733,
											"end": 1738,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1733,
											"end": 1738,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1733,
											"end": 1738,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1757,
											"end": 1940,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1757,
											"end": 1940,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1794,
											"end": 1797,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 1784,
											"end": 1792,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1781,
											"end": 1798,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1778,
											"end": 1780,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1778,
											"end": 1780,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1778,
											"end": 1780,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1801,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1801,
											"end": 1819,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1801,
											"end": 1819,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 1801,
											"end": 1819,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1850,
											"end": 1858,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1847,
											"end": 1848,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1843,
											"end": 1859,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 1834,
											"end": 1859,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1834,
											"end": 1859,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1885,
											"end": 1888,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1878,
											"end": 1883,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1875,
											"end": 1889,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1872,
											"end": 1874,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1872,
											"end": 1874,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1872,
											"end": 1874,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1892,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1892,
											"end": 1910,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1892,
											"end": 1910,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1892,
											"end": 1910,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1892,
											"end": 1910,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1925,
											"end": 1930,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1925,
											"end": 1930,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 1925,
											"end": 1930,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1940,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 1669,
											"end": 1940,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1940,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2024,
											"end": 2026,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2014,
											"end": 2022,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2011,
											"end": 2027,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2005,
											"end": 2008,
											"name": "PUSH",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 1999,
											"end": 2003,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1996,
											"end": 2009,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1992,
											"end": 2028,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1986,
											"end": 1988,
											"name": "PUSH",
											"source": 3,
											"value": "4E"
										},
										{
											"begin": 1976,
											"end": 1984,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1973,
											"end": 1989,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1968,
											"end": 1970,
											"name": "PUSH",
											"source": 3,
											"value": "B"
										},
										{
											"begin": 1962,
											"end": 1966,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1959,
											"end": 1971,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1955,
											"end": 1990,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1952,
											"end": 2029,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2061,
											"end": 2080,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2061,
											"end": 2080,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2061,
											"end": 2080,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 2096,
											"end": 2110,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2096,
											"end": 2110,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2096,
											"end": 2110,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2093,
											"end": 2095,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2093,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2093,
											"end": 2095,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2113,
											"end": 2131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2113,
											"end": 2131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 2113,
											"end": 2131,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2113,
											"end": 2131,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 2113,
											"end": 2131,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2146,
											"end": 2151,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "53"
										},
										{
											"begin": 2146,
											"end": 2151,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2193,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 2231,
											"end": 2234,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2221,
											"end": 2229,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2215,
											"end": 2219,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2212,
											"end": 2213,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2193,
											"end": 2235,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 2193,
											"end": 2235,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2193,
											"end": 2235,
											"name": "tag",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 2193,
											"end": 2235,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2268,
											"end": 2274,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2263,
											"end": 2266,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 2259,
											"end": 2275,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2250,
											"end": 2257,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2247,
											"end": 2276,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2244,
											"end": 2246,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2244,
											"end": 2246,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 2244,
											"end": 2246,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2279,
											"end": 2297,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 2279,
											"end": 2297,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 2279,
											"end": 2297,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2279,
											"end": 2297,
											"name": "tag",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 2279,
											"end": 2297,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2337,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2317,
											"end": 2337,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1485,
											"end": 2343,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1485,
											"end": 2343,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2348,
											"end": 2516,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 2348,
											"end": 2516,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2516,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2454,
											"end": 2455,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2450,
											"end": 2451,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2446,
											"end": 2452,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2442,
											"end": 2456,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2439,
											"end": 2440,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2436,
											"end": 2457,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2431,
											"end": 2432,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2424,
											"end": 2433,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2417,
											"end": 2434,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2413,
											"end": 2458,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2410,
											"end": 2412,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2410,
											"end": 2412,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 2410,
											"end": 2412,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2461,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 2461,
											"end": 2479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 2461,
											"end": 2479,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2461,
											"end": 2479,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 2461,
											"end": 2479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2501,
											"end": 2510,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2501,
											"end": 2510,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2400,
											"end": 2516,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2521,
											"end": 2656,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2521,
											"end": 2656,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2521,
											"end": 2656,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2581,
											"end": 2598,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2581,
											"end": 2598,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 2578,
											"end": 2580,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2601,
											"end": 2619,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 2601,
											"end": 2619,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 2601,
											"end": 2619,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2601,
											"end": 2619,
											"name": "tag",
											"source": 3,
											"value": "76"
										},
										{
											"begin": 2601,
											"end": 2619,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2648,
											"end": 2649,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2637,
											"end": 2650,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2637,
											"end": 2650,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2568,
											"end": 2656,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2661,
											"end": 2845,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 2661,
											"end": 2845,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "EXP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": 2710,
											"end": 2711,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2703,
											"end": 2791,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2810,
											"end": 2814,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 2807,
											"end": 2808,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2800,
											"end": 2815,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2834,
											"end": 2838,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2831,
											"end": 2832,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2824,
											"end": 2839,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"toShortString(bytes32)": "db91bb50"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"toShortString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Whale.sol\":\"Whale\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/Whale.sol\":{\"keccak256\":\"0x0423c5587e5dc62191402df9496c7447dfa492d02722d884e24ade6fdfb57395\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9fb1f15acb1443451a771f40f8e0f7ff12164ed54859eded937b2e31d0a03bdc\",\"dweb:/ipfs/QmbtbzkDzygh9mqS8LFLaCG6HYfYXkbiLDtsZoEdoiu6Yd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							127
						],
						"IERC721": [
							115
						]
					},
					"id": 116,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 116,
							"sourceUnit": 128,
							"src": "133:47:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 127,
										"src": "271:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:0"
								}
							],
							"contractDependencies": [
								127
							],
							"contractKind": "interface",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:0",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 115,
							"linearizedBaseContracts": [
								115,
								127
							],
							"name": "IERC721",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 14,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "393:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "415:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "435:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:0"
									},
									"src": "378:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 23,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "580:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "603:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "629:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:0"
									},
									"src": "565:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 32,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "803:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "826:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "852:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:0"
									},
									"src": "782:85:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 40,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "973:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1011:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:0"
									},
									"scope": 115,
									"src": "954:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 48,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1187:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1227:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:0"
									},
									"scope": 115,
									"src": "1170:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1844:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1866:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1886:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1911:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 56,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:0"
									},
									"scope": 115,
									"src": "1809:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2679:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2701:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2721:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:0"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:0"
									},
									"scope": 115,
									"src": "2644:108:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "2758:504:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3298:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3320:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3340:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3288:73:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3370:0:0"
									},
									"scope": 115,
									"src": "3267:104:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "3377:452:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 88,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3851:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3851:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3863:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3850:29:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3888:0:0"
									},
									"scope": 115,
									"src": "3834:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "3895:309:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 96,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4236:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 90,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4254:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 92,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4254:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4235:34:0"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4278:0:0"
									},
									"scope": 115,
									"src": "4209:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "4285:139:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4450:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4449:17:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4490:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4490:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4489:18:0"
									},
									"scope": 115,
									"src": "4429:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "4514:138:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4683:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4698:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4698:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4682:33:0"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4739:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4739:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4738:6:0"
									},
									"scope": 115,
									"src": "4657:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 116,
							"src": "250:4497:0"
						}
					],
					"src": "108:4640:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							127
						]
					},
					"id": 128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 117,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:1",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 127,
							"linearizedBaseContracts": [
								127
							],
							"name": "IERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:1",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "801:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 120,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "844:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 123,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:1"
									},
									"scope": 127,
									"src": "774:76:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 128,
							"src": "405:447:1"
						}
					],
					"src": "100:753:1"
				},
				"id": 1
			},
			"contracts/Whale.sol": {
				"ast": {
					"absolutePath": "contracts/Whale.sol",
					"exportedSymbols": {
						"IERC165": [
							127
						],
						"IERC721": [
							115
						],
						"Whale": [
							228
						]
					},
					"id": 229,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 129,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 130,
							"nodeType": "ImportDirective",
							"scope": 229,
							"sourceUnit": 116,
							"src": "62:58:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 228,
							"linearizedBaseContracts": [
								228
							],
							"name": "Whale",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "234:1674:2",
										"statements": [
											{
												"assignments": [
													138
												],
												"declarations": [
													{
														"constant": false,
														"id": 138,
														"mutability": "mutable",
														"name": "_bytesContainer",
														"nodeType": "VariableDeclaration",
														"scope": 226,
														"src": "315:28:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 137,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "315:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 143,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "356:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 140,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "346:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 139,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "350:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "346:13:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "315:44:2"
											},
											{
												"assignments": [
													145
												],
												"declarations": [
													{
														"constant": false,
														"id": 145,
														"mutability": "mutable",
														"name": "_charCount",
														"nodeType": "VariableDeclaration",
														"scope": 226,
														"src": "498:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 144,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "498:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 147,
												"initialValue": {
													"hexValue": "30",
													"id": 146,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "519:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "498:22:2"
											},
											{
												"body": {
													"id": 192,
													"nodeType": "Block",
													"src": "640:744:2",
													"statements": [
														{
															"assignments": [
																159
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 159,
																	"mutability": "mutable",
																	"name": "_char",
																	"nodeType": "VariableDeclaration",
																	"scope": 192,
																	"src": "1065:12:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	},
																	"typeName": {
																		"id": 158,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "1065:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 177,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 174,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 166,
																							"name": "_data",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 132,
																							"src": "1103:5:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 165,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1095:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 164,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "1095:7:2",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 167,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1095:14:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 173,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "32",
																						"id": 168,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1112:1:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_2_by_1",
																							"typeString": "int_const 2"
																						},
																						"value": "2"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 171,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "38",
																									"id": 169,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "1118:1:2",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"id": 170,
																									"name": "_bytesCounter",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 149,
																									"src": "1122:13:2",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "1118:17:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 172,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "1117:19:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "1112:24:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "1095:41:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1087:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 162,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "1087:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 175,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1087:50:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1080:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes1_$",
																		"typeString": "type(bytes1)"
																	},
																	"typeName": {
																		"id": 160,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "1080:6:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 176,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1080:58:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1065:73:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																},
																"id": 180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 178,
																	"name": "_char",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 159,
																	"src": "1193:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1202:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1193:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 191,
															"nodeType": "IfStatement",
															"src": "1189:189:2",
															"trueBody": {
																"id": 190,
																"nodeType": "Block",
																"src": "1205:173:2",
																"statements": [
																	{
																		"expression": {
																			"id": 185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 181,
																					"name": "_bytesContainer",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 138,
																					"src": "1259:15:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 183,
																				"indexExpression": {
																					"id": 182,
																					"name": "_charCount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 145,
																					"src": "1275:10:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "1259:27:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes1",
																					"typeString": "bytes1"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 184,
																				"name": "_char",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "1289:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes1",
																					"typeString": "bytes1"
																				}
																			},
																			"src": "1259:35:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes1",
																				"typeString": "bytes1"
																			}
																		},
																		"id": 186,
																		"nodeType": "ExpressionStatement",
																		"src": "1259:35:2"
																	},
																	{
																		"expression": {
																			"id": 188,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "++",
																			"prefix": false,
																			"src": "1355:12:2",
																			"subExpression": {
																				"id": 187,
																				"name": "_charCount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 145,
																				"src": "1355:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 189,
																		"nodeType": "ExpressionStatement",
																		"src": "1355:12:2"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 152,
														"name": "_bytesCounter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 149,
														"src": "603:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 153,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "619:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "603:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 193,
												"initializationExpression": {
													"assignments": [
														149
													],
													"declarations": [
														{
															"constant": false,
															"id": 149,
															"mutability": "mutable",
															"name": "_bytesCounter",
															"nodeType": "VariableDeclaration",
															"scope": 193,
															"src": "576:21:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 148,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "576:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 151,
													"initialValue": {
														"hexValue": "30",
														"id": 150,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "600:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "576:25:2"
												},
												"loopExpression": {
													"expression": {
														"id": 156,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "623:15:2",
														"subExpression": {
															"id": 155,
															"name": "_bytesCounter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 149,
															"src": "623:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 157,
													"nodeType": "ExpressionStatement",
													"src": "623:15:2"
												},
												"nodeType": "ForStatement",
												"src": "571:813:2"
											},
											{
												"assignments": [
													195
												],
												"declarations": [
													{
														"constant": false,
														"id": 195,
														"mutability": "mutable",
														"name": "_bytesContainerTrimmed",
														"nodeType": "VariableDeclaration",
														"scope": 226,
														"src": "1454:35:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 194,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1454:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 200,
												"initialValue": {
													"arguments": [
														{
															"id": 198,
															"name": "_charCount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 145,
															"src": "1502:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 197,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1492:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 196,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1496:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1492:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1454:59:2"
											},
											{
												"body": {
													"id": 219,
													"nodeType": "Block",
													"src": "1645:161:2",
													"statements": [
														{
															"expression": {
																"id": 217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 211,
																		"name": "_bytesContainerTrimmed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 195,
																		"src": "1731:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 213,
																	"indexExpression": {
																		"id": 212,
																		"name": "_charCounter",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 202,
																		"src": "1754:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1731:36:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 214,
																		"name": "_bytesContainer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 138,
																		"src": "1770:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 216,
																	"indexExpression": {
																		"id": 215,
																		"name": "_charCounter",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 202,
																		"src": "1786:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1770:29:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1731:68:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 218,
															"nodeType": "ExpressionStatement",
															"src": "1731:68:2"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 205,
														"name": "_charCounter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 202,
														"src": "1602:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 206,
														"name": "_charCount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "1617:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1602:25:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 220,
												"initializationExpression": {
													"assignments": [
														202
													],
													"declarations": [
														{
															"constant": false,
															"id": 202,
															"mutability": "mutable",
															"name": "_charCounter",
															"nodeType": "VariableDeclaration",
															"scope": 220,
															"src": "1576:20:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 201,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1576:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 204,
													"initialValue": {
														"hexValue": "30",
														"id": 203,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1599:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1576:24:2"
												},
												"loopExpression": {
													"expression": {
														"id": 209,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1629:14:2",
														"subExpression": {
															"id": 208,
															"name": "_charCounter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "1629:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 210,
													"nodeType": "ExpressionStatement",
													"src": "1629:14:2"
												},
												"nodeType": "ForStatement",
												"src": "1571:235:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 223,
															"name": "_bytesContainerTrimmed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "1878:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1871:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 221,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1871:6:2",
															"typeDescriptions": {}
														}
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1871:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 136,
												"id": 225,
												"nodeType": "Return",
												"src": "1864:37:2"
											}
										]
									},
									"functionSelector": "db91bb50",
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "166:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 131,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "166:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "165:15:2"
									},
									"returnParameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "214:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 134,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "214:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "213:16:2"
									},
									"scope": 228,
									"src": "143:1765:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 229,
							"src": "122:1788:2"
						}
					],
					"src": "37:1873:2"
				},
				"id": 2
			}
		}
	}
}